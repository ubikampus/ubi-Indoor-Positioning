/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.2.1/userguide/tutorial_java_projects.html
 */

plugins {
    id 'java-library'
    
    //For jitback
    id 'maven'
    id 'maven-publish'

    //Test Coverage
    id 'jacoco'
    
    // Code style
    id 'checkstyle'
}

group = 'com.github.ubikampus'
version = '0.2.0'

jacoco {
    toolVersion = "0.8.3"
    reportsDir = file("$buildDir/JacocoReports")
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    api 'org.apache.commons:commons-math3:3.6.1'

    implementation 'com.google.guava:guava:27.0.1-jre'
    implementation 'com.github.ubikampus:ubimqttjava:v2.0.6'
    implementation 'com.lemmingapex.trilateration:trilateration:1.0.2'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.1.0'
}

test {
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
}

sourceCompatibility = 1.11
targetCompatibility = 1.11

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/*UbiMqttProvider.*', '**/*UbiMqttProvider$*.*'
            ])
        })
    }
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

task stage {
    dependsOn build
}

task copyToLib(type: Copy) {
    into "$buildDir/libs"
    from(configurations.compile)
}

stage.dependsOn(copyToLib)
check.dependsOn jacocoTestReport

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

