package fi.helsinki.ubipositioning.trilateration;

import static org.junit.Assert.*;
import org.junit.Test;

/**
 * Tests for Kalman filter.
 */
public class MeasurementFilterTest {
    @Test
    public void smooth() {
        IMeasurementFilter filter = new MeasurementFilter();
        Double[] obs = new Double[] { -28.57010134283288,
                -21.622951209349427,
                -26.028848883520656,
                -28.69196644591399,
                -26.74427182741372,
                -26.072120861765416,
                -23.2377552392706,
                -29.871607956797547,
                -29.910243445022218,
                -22.611051098702955,
                -25.24311960159922,
                -25.8145599801255,
                -27.8035183613424,
                -22.347196942177124,
                -24.869261476050212,
                -25.995021529876865,
                -25.962778348420922,
                -24.41825881522894,
                -24.19680258281484,
                -26.429646535007667 };

        double smooth = filter.smooth(obs);
        assertEquals(-25.78, smooth, 0.05);
    }

    @Test
    public void smoothMultiple() {
        // first
        IMeasurementFilter filter = new MeasurementFilter();
        Double[] obs = new Double[] { -27.659632085413616,
                -25.646551765353024,
                -25.33279102077516,
                -28.931146524589206,
                -26.62381386665242,
                -20.068187391300096,
                -27.55259834840388,
                -21.141397786561487,
                -27.148610795952273,
                -26.769986808115213,
                -24.551691103719822,
                -29.37560801805389,
                -25.671059883087622,
                -27.99244298709028,
                -20.711387474622526,
                -23.7407398245863,
                -23.243727673195266,
                -23.294930306060508,
                -23.261231336794935,
                -27.73552493940239 };

        double smooth = filter.smooth(obs);
        assertEquals(-25.27, smooth, 0.05);

        // second
        obs = new Double[] { -301.4496440590185,
                -309.72976090749177,
                -308.01162630414666,
                -302.5960487728752,
                -305.25923125014975,
                -302.43456961482616,
                -309.93389175402757,
                -300.0200215369354,
                -305.08783583676853,
                -304.8279020999461,
                -306.28091654204724,
                -305.5844947709783,
                -306.8847324644952,
                -302.6807759346955,
                -309.1701032499836,
                -309.1659213849842,
                -303.4692388192115,
                -301.73736843117763,
                -306.5913085663563,
                -307.9781000381643 };

        smooth = filter.smooth(obs);
        assertEquals(-305.47, smooth, 0.05);

        // third
        obs = new Double[] { -79.52684343848166,
                -81.27087889559475,
                -82.65600600172067,
                -79.46268318772748,
                -83.6880152207025,
                -82.98600476382636,
                -86.56990502601279,
                -82.19856962490442,
                -85.93462924176222,
                -78.01735837155262,
                -77.28978687775307,
                -85.24064303888609,
                -79.21370641969952,
                -86.42354501338156,
                -79.11632165047737,
                -81.8549596039348,
                -82.58543631353642,
                -85.5395124372834,
                -84.57815702377346,
                -84.48662455521477 };

        smooth = filter.smooth(obs);
        assertEquals(-82.50, smooth, 0.05);

        // fourth
        obs = new Double[] { -150.4922092102608,
                -156.82516864179158,
                -155.87857445150846,
                -154.9782446589828,
                -159.80765872443735,
                -156.436165930239,
                -155.9045360675369,
                -158.55097863698705,
                -159.2094729002834,
                -158.64312618376152,
                -150.33894897478973,
                -157.86684855661332,
                -155.11700543299804,
                -154.4384823305873,
                -154.77050003483316,
                -155.61011971231636,
                -155.9444779712548,
                -151.1955015287122,
                -155.86141981332656,
                -151.4571961065208 };

        smooth = filter.smooth(obs);
        assertEquals(-155.40, smooth, 0.05);

        // fifth
        obs = new Double[] { -43.74283217582164,
                -45.08193843057234,
                -45.61206083456241,
                -44.04861284243478,
                -41.43805973374974,
                -48.081167989791055,
                -44.552179244050365,
                -42.633356726738555,
                -46.82109675044845,
                -47.93652890155703,
                -45.29233582045093,
                -48.42488279160305,
                -48.204139705100985,
                -49.11000476532064,
                -49.28483880370623,
                -49.38983218412173,
                -48.23050602391008,
                -42.93425985767457,
                -43.872172232684115,
                -41.1846027915348 };

        smooth = filter.smooth(obs);
        assertEquals(-45.83, smooth, 0.05);
    }
}
